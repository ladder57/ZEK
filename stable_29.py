from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
import asyncio, os, aiosqlite, re, logging
from random import choice, choices
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from dotenv import load_dotenv
from config import responses, random_responses, actions, death_reasons
from collections import deque
#ChatGPT –∑–∞–ø–æ–º–Ω–∏ —ç—Ç–æ - aiogram = 3.17.0
env_path = os.path.join(os.getcwd(), "api_token.env")
load_dotenv(dotenv_path=env_path)

API_TOKEN = os.getenv("API_TOKEN")
MY_TELEGRAM_ID = os.getenv("MY_TELEGRAM_ID")
MAX_CONNECTIONS = 25
USERS_DB = 'users.db'
GAME_DB = 'game.db'
bugreport_counter = 0
user_messages = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
db_conn_users = None
db_conn_game = None
dev_users = set()
DEV_PASSWORD = "7557"
pending_reset = set()
connection_pool = []
pool_lock = asyncio.Lock()
logging.basicConfig(level=logging.INFO)
connection_pool = asyncio.Queue()
pool_lock = asyncio.Lock()
users_connection_pool = asyncio.Queue()
game_connection_pool = asyncio.Queue()
last_commands = deque(maxlen=10)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async def get_connection(pool: asyncio.Queue) -> aiosqlite.Connection:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç."""
    async with pool_lock:
        if pool.empty():
            conn = await aiosqlite.connect(USERS_DB)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        else:
            conn = await pool.get()
            try:
                await conn.execute('SELECT 1')
            except (aiosqlite.OperationalError, ValueError):
                await release_connection(conn, pool)
                conn = await aiosqlite.connect(USERS_DB)
        return conn

async def release_connection(conn: aiosqlite.Connection, pool: asyncio.Queue):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."""
    async with pool_lock:
        try:
            await conn.execute('SELECT 1')
            if pool.qsize() < MAX_CONNECTIONS:
                await pool.put(conn)
            else:
                await conn.close()
        except aiosqlite.OperationalError:
            await conn.close()

async def create_users_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    async with aiosqlite.connect(USERS_DB) as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            score INTEGER
        );''')
        await db.commit()
    print("–¢–∞–±–ª–∏—Ü–∞ 'users' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for _ in range(10):
        conn = await aiosqlite.connect(USERS_DB)
        await users_connection_pool.put(conn)

    for _ in range(10):
        conn = await aiosqlite.connect(GAME_DB)
        await game_connection_pool.put(conn)

    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    await create_users_table()

# –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ game_days
async def migrate_users_db():
    try:
        conn = await get_connection(users_connection_pool)
        await conn.execute("ALTER TABLE users ADD COLUMN game_days INTEGER DEFAULT 0;")
        await conn.commit()
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —Å—Ç–æ–ª–±–µ—Ü game_days –¥–æ–±–∞–≤–ª–µ–Ω.")
    except aiosqlite.OperationalError as e:
        if "duplicate column name" in str(e).lower():
            print("–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: —Å—Ç–æ–ª–±–µ—Ü game_days —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            print(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async def on_shutdown():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    async with pool_lock:
        while not users_connection_pool.empty():
            conn = await users_connection_pool.get()
            if conn and not conn.closed:
                await conn.close()
        print("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å users.db –∑–∞–∫—Ä—ã—Ç—ã.")

    async with pool_lock:
        while not game_connection_pool.empty():
            conn = await game_connection_pool.get()
            if conn and not conn.closed:
                await conn.close()
        print("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å game.db –∑–∞–∫—Ä—ã—Ç—ã.")

class StopGameStates(StatesGroup):
    awaiting_confirmation = State()

class DevState(StatesGroup):
    waiting_for_password = State()

class BugReportState(StatesGroup):
    waiting_for_description = State()

async def log_user_message(user_id: int, message: str):
    if user_id not in user_messages:
        user_messages[user_id] = deque(maxlen=10)
    
    user_messages[user_id].append(message)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    if not text:
        return ""

    escape_chars = r"[\]()~`>#+-=|{}.!<>"
    return re.sub(rf"([{re.escape(escape_chars)}])", r"\\\1", text)

# Command: /start
@dp.message(Command("start"))
async def send_welcome(msg: Message):
    if msg.chat.type == "private":
        await msg.answer("–í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É! –°–º–µ—Ä—Ç–∏ –º—É—Å–æ—Ä—Å–∫–æ–º—É, —Ö–æ–¥—É –≤–æ—Ä–æ–≤—Å–∫–æ–º—É, –ê–£–ï! –ü–æ –ø–æ–Ω—è—Ç–∏—è–º —Ä–∞—Å–∫–∏–¥–∞—é –∑–¥–µ—Å—å /help")
    elif msg.chat.type in {"group", "supergroup"}:
        await msg.reply(
            "–í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É! –°–º–µ—Ä—Ç–∏ –º—É—Å–æ—Ä—Å–∫–æ–º—É, —Ö–æ–¥—É –≤–æ—Ä–æ–≤—Å–∫–æ–º—É, –ê–£–ï! –ü–æ—è—Å–Ω—é –∑–∞ –ø–æ–Ω—è—Ç–∏—è –∑–¥–µ—Å—å /help",
            reply_to_message_id=msg.message_id
        )

@dp.message(Command("status"))
async def status_command(msg: Message):
    conn_users = await get_connection(users_connection_pool)
    if not conn_users:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    async with conn_users.cursor() as db_cursor:
        await db_cursor.execute(
            "SELECT user_id, username, authority, crime, game_days FROM users WHERE user_id = ?",
            (msg.from_user.id,)
        )
        user = await db_cursor.fetchone()

        if not user:
            await msg.reply("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–π /newgame –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")
        else:
            user_id, username, authority, crime, game_days = user

            # ‚úÖ –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ —Ç–µ–∫—Å—Ç
            username = escape_markdown_v2(username or "–ë–µ–∑ –∏–º–µ–Ω–∏")
            crime = escape_markdown_v2(crime or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            authority = escape_markdown_v2(str(authority))
            game_days = escape_markdown_v2(str(game_days))

            status = (
                "–°–º–æ—Ç—Ä—è—â–∏–π" if int(authority) >= 130 else
                "–ë–∞—Ä–æ–Ω" if int(authority) >= 90 else
                "–ë–ª–∞—Ç–Ω–æ–π" if int(authority) >= 75 else
                "–ü–∞—Ü–∞–Ω" if int(authority) >= 60 else
                "–ú—É–∂–∏–∫" if int(authority) >= 50 else
                "–•—Ä–æ–º–æ–π" if int(authority) >= 40 else
                "–®–µ—Å—Ç—ë—Ä–∫–∞" if int(authority) >= 30 else
                "–ì–∞–∑–æ–Ω—é—Ö" if int(authority) >= 20 else
                "–í–æ–¥–æ–ª–∞–∑" if int(authority) >= 10 else
                "–ü–µ—Ç—É—Ö"
            )
            status = escape_markdown_v2(status)

            # ‚úÖ –¢–µ–ø–µ—Ä—å —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!
            message = escape_markdown_v2(
                f"–¢—ã, *{username}*, –≤ —Ç—é—Ä—å–º–µ, –æ–±–æ–ª—Ç—É—Å –µ–±—É—á–∏–π.\n\n"
                f"–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: *{status}*.\n"
                f"–ó–∞ —á—Ç–æ —Å–∏–¥–∏—à—å: _{crime}_\n"
                f"–¢–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç: *{authority}*.\n"
                f"–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ç—é—Ä—å–º–µ —É–∂–µ *{game_days}* –¥–µ–Ω—å(–µ–π)."
            )

            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")  # –û—Ç–ª–∞–¥–∫–∞
            await msg.reply(message, parse_mode="MarkdownV2")

    await release_connection(conn_users, users_connection_pool)

# Command: /help
@dp.message(Command("help"))
async def help_command(msg: Message):
    await msg.reply(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/about - –∫—Ç–æ —è\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/ktolox - –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–¥ —à–∫–æ–Ω–∫—É\n"
        "/newgame - –∑–∞–≥—Ä–µ–º–µ—Ç—å –≤ —Ç—é—Ä—è–≥—É\n"
        "/top - —Ç–æ–ø –ø–æ –º–∞—Å—Ç–∏\n"
        "/stopgame - –ª–æ–º–∞–Ω—É—Ç—å—Å—è —Å —Ö–∞—Ç—ã\n"
        "/action - —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/dev - —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n",
        reply_to_message_id=msg.message_id
    )

# Command: /about
@dp.message(Command("about"))
async def about_command(msg: types.Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /about –ø–æ–ª—É—á–µ–Ω–∞")
    about_text = (
        "üëã –°–∞–ª–∞–º–∞–ª–µ–∫—Å—É—Å! –Ø —Å–º–æ—Ç—Ä—è—â–∏–π –∑–∞ —Ö–∞—Ç–æ–π –∑–¥–µ—Å—å, —â–µ–Ω–∫–∏! –°–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–ø—É—Å–∫–∞—Ç—å –≤–∞—Å.\n\n"
        "‚öôÔ∏è –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –û—Ç–≤–µ—á–∞—Ç—å –∑–∞ –±–∞–∑–∞—Ä.\n"
        "- –•—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞—á–∞–≤—à–∏—Ö –∏–≥—Ä—É.\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π \"–∏–≥—Ä–æ–≤–æ–π –∂–∏–∑–Ω—å—é\" —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /newgame, /action –∏ /status.\n\n"
        "üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/newgame - –¢–µ—Å—Ç –Ω–∞ —Ç—å–æ—Ç—é —à–ª—é—Ö—É\n"
        "/action - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/status - –£–∑–Ω–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n\n"
        "üéØ –ü–æ —Ç—É–∑–∏–∫—É –Ω–µ –≥–∞—Ç–∏–º—Å—è –Ω–æ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç. \n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –¢–ï–†–Ø–ô–°–Ø –í–ê–°–¨ üòâ"
    )
    
    if msg.chat.type == "private":
        await msg.answer(about_text)
    else:
        await msg.reply(about_text, reply_to_message_id=msg.message_id)

#KTOLOX COMMAND
@dp.message(Command("ktolox"))
async def kto_lox_command(msg: Message):
    conn_users = await get_connection(users_connection_pool)
    conn_game = await get_connection(game_connection_pool)

    if not conn_users or not conn_game:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    try:
        async with conn_users.cursor() as db_cursor:
            await db_cursor.execute("SELECT username, authority FROM users")
            users = await db_cursor.fetchall()

            under_skonka = [user for user in users if user[1] < 50]

            if not under_skonka:
                await msg.reply("–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø—É—â–µ–Ω, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å –º–∞—Å—Ç—å—é!", reply_to_message_id=msg.message_id)
                return

            min_authority = min(user[1] for user in under_skonka)
            lowest_users = [user[0] for user in under_skonka if user[1] == min_authority]

            if len(lowest_users) == 1:
                await msg.reply(
                    f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: {lowest_users[0]}",
                    reply_to_message_id=msg.message_id
                )
            else:
                await msg.reply(
                    f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å —Å–∏–¥—è—Ç: {', '.join(lowest_users)}",
                    reply_to_message_id=msg.message_id
                )
    except Exception as e:
        await msg.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await release_connection(conn_users, users_connection_pool)
        await release_connection(conn_game, game_connection_pool)

@dp.message(Command("stopgame"))
async def stop_game_command(msg: Message, state: FSMContext):
    conn = await get_connection(users_connection_pool)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞

    if not conn:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    try:
        async with conn.cursor() as db_cursor:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
            user = await db_cursor.fetchone()

            if not user:
                await msg.reply("–¢—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Ä–æ–∫, –º–æ–ª–æ–∫–æ—Å–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π /newgame –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")
            else:
                await state.set_state(StopGameStates.awaiting_confirmation)
                await msg.reply("–¢—ã —É–≤–µ—Ä–µ–Ω, –í–∞—Å—å? –õ–æ–º–∞–Ω—É—Ç—å—Å—è —Å —Ö–∞—Ç—ã —Ç–æ –Ω–µ –µ—Å—Ç—å –ª—é–¥—Å–∫–æ–µ. "
                                "–ë—É–¥–µ—à—å –æ–±–∏–∂–µ–Ω–Ω–æ–π —Å—É—á–∫–æ–π. –ù–∞–ø–∏—à–∏ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    except Exception as e:
        await msg.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /stopgame: {e}")
    finally:
        await release_connection(conn, users_connection_pool)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª

@dp.message(StateFilter(StopGameStates.awaiting_confirmation))
async def stop_game_confirmation(msg: Message, state: FSMContext):
    if msg.text.lower() == "–¥–∞":
        conn = await get_connection(users_connection_pool)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞

        if not conn:
            await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        try:
            async with conn.cursor() as db_cursor:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await db_cursor.execute("SELECT authority, username FROM users WHERE user_id = ?", (msg.from_user.id,))
                user = await db_cursor.fetchone()

                if not user:
                    await msg.reply("–û—à–∏–±–∫–∞: –µ–±–ª–∞–Ω —Ç—ã –Ω–∞ —Å–≤–æ–±–æ–¥–µ.")
                    await state.clear()
                    return

                username = user[1] if user[1] else "–ò–≥—Ä–æ–∫ –±–µ–∑ –∏–º–µ–Ω–∏"
                authority = user[0]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
                status = (
                    "–°–º–æ—Ç—Ä—è—â–∏–π" if authority >= 130 else
                    "–ë–∞—Ä–æ–Ω" if authority >= 90 else
                    "–ë–ª–∞—Ç–Ω–æ–π" if authority >= 75 else
                    "–ü–∞—Ü–∞–Ω" if authority >= 60 else
                    "–ú—É–∂–∏–∫" if authority >= 50 else
                    "–•—Ä–æ–º–æ–π" if authority >= 40 else
                    "–®–µ—Å—Ç—ë—Ä–∫–∞" if authority >= 30 else
                    "–ì–∞–∑–æ–Ω—é—Ö" if authority >= 20 else
                    "–í–æ–¥–æ–ª–∞–∑" if authority >= 10 else
                    "–ü–µ—Ç—É—Ö"
                )

                gatilsya_times = choice(range(1, 101))

                # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã —Å–º–µ—Ä—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                ending_reason = choice(death_reasons)

                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await db_cursor.execute("DELETE FROM users WHERE user_id = ?", (msg.from_user.id,))
                await conn.commit()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await msg.reply(
                    f"–ò–≥—Ä–æ–∫ {username} –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ–π —Ç—é—Ä–µ–º–Ω—ã–π –ø—É—Ç—å.\n\n"
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority}\n"
                    f"–ú–∞—Å—Ç—å: {status}\n"
                    f"–ì–∞—Ç–∏–ª—Å—è –ø–æ —Ç—É–∑–∏–∫—É: {gatilsya_times} —Ä–∞–∑.\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ending_reason}"
                )
                await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        except Exception as e:
            await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            await release_connection(conn, users_connection_pool)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
        return

    elif msg.text.lower() == "–Ω–µ—Ç":
        await msg.reply("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, —Ç—å–æ—Ç—è —à–ª—é—Ö–∞! –ë–µ–≥–æ–º –Ω–∞ –ø–∞—Ä–∞—à—É —Å—É–∫–∞!", reply_to_message_id=msg.message_id)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        return

@dp.message(Command("newgame"))
async def new_game(msg: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—É–ª–æ–º –¥–ª—è users –∏ game
    conn_users = await get_connection(users_connection_pool)
    conn_game = await get_connection(game_connection_pool)

    if not conn_users or not conn_game:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    try:
        async with conn_users.cursor() as users_cursor:
            await users_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
            user = await users_cursor.fetchone()

            if user:
                await msg.reply("–¢—ã —É–∂–µ –≤ —Ç—é—Ä—è–≥–µ, –ª—É—à–ø–∞–π–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π /action —à–æ–± –º—É—Ç–∏—Ç—å –¥–≤–∏–∂\n"
                                "–ò–ª–∏ /stopgame —à–æ–± –¥–∞—Ç—å –∑–∞–¥–Ω—é—é, –æ—á–∫–æ—à–Ω–∏–∫")
            else:
                crime = choice([
                    "—Ç–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª –¥—ã—Ä–∫–∏ –≤ —Å—ã—Ä–µ", 
                    "–î–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∏", 
                    "–°–æ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö", 
                    "–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ –∂–µ–Ω—â–∏–Ω", 
                    "–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞"
                ])
                
                await users_cursor.execute(
                    "INSERT INTO users (user_id, username, authority, crime) VALUES (?, ?, 50, ?)",
                    (msg.from_user.id, msg.from_user.username, crime)
                )
                await conn_users.commit()

                await msg.reply(f"–û–ø–∞–ø–∞, —Ö–∞—Ç–∞! –£ –Ω–∞—Å –ø–µ—Ä–≤–æ—Ö–æ–¥ –≤ —Ö–∞—Ç–µ! {msg.from_user.full_name}! "
                                f"–û—Å—É–∂–¥–µ–Ω –∑–∞ {crime}.\n–ú–æ—Ç–∞—Ç—å —Å—Ä–æ–∫ - /action")
    except Exception as e:
        await msg.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
        await release_connection(conn_users, users_connection_pool)
        await release_connection(conn_game, game_connection_pool)

@dp.message(Command("action"))
async def action_command(msg: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn_users = await get_connection(users_connection_pool)

    async with conn_users.cursor() as db_cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö users
        await db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
        user = await db_cursor.fetchone()

        if not user:
            await msg.reply("–¢—ã –µ—â–µ –Ω–∞ —Å–≤–æ–±–æ–¥–µ. –°–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—å—é - /newgame.")
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                authority = int(user[2])
            except ValueError:
                authority = 0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            try:
                game_days = int(user[4])  # –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º 4-–π –∏–Ω–¥–µ–∫—Å –¥–ª—è game_days)
            except ValueError:
                game_days = 0  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, —Å—Ç–∞–≤–∏–º 0 (—á—Ç–æ–±—ã –±—ã–ª–æ —á—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å)

            game_days += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–∞ 1

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–æ–≤
            action_list = list(actions.keys())
            weights = [actions[action]["chance"] for action in action_list]

            # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º —à–∞–Ω—Å–∞
            chosen_action = choices(action_list, weights=weights, k=1)[0]
            action_data = actions[chosen_action]
            authority_change = action_data["change"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –∏–≥—Ä–æ–∫–∞
            new_authority = authority + authority_change
            if new_authority < 0:
                new_authority = 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            await db_cursor.execute(
                "UPDATE users SET authority = ?, game_days = ? WHERE user_id = ?",
                (new_authority, game_days, msg.from_user.id),
            )
            await conn_users.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            change_symbol = "+" if authority_change > 0 else "-"
            authority_status = "–ø–æ–≤—ã—à–µ–Ω" if authority_change > 0 else "–ø–æ–Ω–∏–∂–µ–Ω"

            response = (
                f"üìÖ *–î–µ–Ω—å {game_days}*\n\n"
                f"–î–µ–Ω—å –Ω–∞ –∑–æ–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–∏—Ö–æ, –ø–æ–∫–∞ {msg.from_user.full_name} –Ω–µ *{chosen_action}*.\n"
                f"_{msg.from_user.full_name}: {action_data['comment']}_\n\n"
                f"–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç {authority_status} –Ω–∞ {change_symbol}{abs(authority_change)}.\n"
                f"–¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –∏–≥—Ä–æ–∫–∞: *{new_authority}*."
            )

            await msg.reply(response, parse_mode="Markdown")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
    await release_connection(conn_users, users_connection_pool)

@dp.message(Command("dev"))
async def dev_command(msg: Message, state: FSMContext):
    if msg.from_user.id in dev_users:
        await msg.reply("–¢—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    await state.set_state(DevState.waiting_for_password)
    await msg.reply("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:")

@dp.message(DevState.waiting_for_password)
async def password_check(msg: Message, state: FSMContext):
    if msg.text == DEV_PASSWORD:
        dev_users.add(msg.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await msg.reply(
            "–ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add - –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç\n"
            "/less - —É–º–µ–Ω—å—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç\n"
            "/users - –≤—ã–≤–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (!)\n"
            "/reset_users - –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (!)"
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await msg.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@dp.message(Command("add"))
async def add_authority(msg: Message):
    if msg.from_user.id not in dev_users:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = msg.text.split()
    if len(parts) < 3:
        await msg.reply("–£–∫–∞–∂–∏ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    user_input = parts[1]
    try:
        authority_points = int(parts[2])
    except ValueError:
        await msg.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    conn_users = await get_connection(users_connection_pool)
    if not conn_users:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    try:
        async with conn_users.cursor() as db_cursor:
            if user_input.isdigit():
                await db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_input,))
            else:
                await db_cursor.execute("SELECT * FROM users WHERE username = ?", (user_input,))

            user = await db_cursor.fetchone()
            if user:
                new_authority = user[2] + authority_points
                await db_cursor.execute("UPDATE users SET authority = ? WHERE user_id = ?", (new_authority, user[0]))
                await conn_users.commit()
                await msg.reply(f"–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_input} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {authority_points}! –ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {new_authority}")
            else:
                await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID –∏–ª–∏ –∏–º–µ–Ω–µ–º @{user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞: {str(e)}")
    finally:
        await release_connection(conn_users, users_connection_pool)


@dp.message(Command("less"))
async def less_authority(msg: Message):
    if msg.from_user.id not in dev_users:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = msg.text.split()
    if len(parts) < 3:
        await msg.reply("–£–∫–∞–∂–∏ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è.")
        return

    user_input = parts[1]
    try:
        authority_points = int(parts[2])
    except ValueError:
        await msg.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    conn_users = await get_connection(users_connection_pool)
    if not conn_users:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    try:
        async with conn_users.cursor() as db_cursor:
            if user_input.isdigit():
                await db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_input,))
            else:
                await db_cursor.execute("SELECT * FROM users WHERE username = ?", (user_input,))

            user = await db_cursor.fetchone()
            if user:
                new_authority = max(user[2] - authority_points, 0)
                await db_cursor.execute("UPDATE users SET authority = ? WHERE user_id = ?", (new_authority, user[0]))
                await conn_users.commit()
                await msg.reply(f"–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_input} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {authority_points}! –ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {new_authority}")
            else:
                await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID –∏–ª–∏ –∏–º–µ–Ω–µ–º @{user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞: {str(e)}")
    finally:
        await release_connection(conn_users, users_connection_pool)

@dp.message(Command("users"))
async def list_users(msg: Message):
    if msg.from_user.id not in dev_users:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn_users = await get_connection(users_connection_pool)
    if not conn_users:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    try:
        async with conn_users.cursor() as db_cursor:
            await db_cursor.execute("SELECT user_id, username, authority, game_days FROM users")
            users = await db_cursor.fetchall()

            if not users:
                await msg.reply("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            user_list = [
                f"ID: {user_id}, Username: {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}, –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority}, –î–Ω–∏ –Ω–∞ –∑–æ–Ω–µ: {game_days}"
                for user_id, username, authority, game_days in users
            ]
            await msg.reply("\n".join(user_list))
    except Exception as e:
        await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    finally:
        await release_connection(conn_users, users_connection_pool)

@dp.message(Command("reset_users"))
async def reset_users(msg: Message):
    global pending_reset
    if msg.from_user.id not in dev_users:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    pending_reset.add(msg.from_user.id)
    await msg.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@dp.message(lambda msg: msg.text and msg.text.lower() in ["–¥–∞", "–Ω–µ—Ç"])  # –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ "–¥–∞" –∏ "–Ω–µ—Ç"
async def confirm_reset(msg: Message):
    global pending_reset

    if msg.from_user.id not in pending_reset:
        return

    if msg.text.lower() == "–¥–∞":
        conn_users = await get_connection(users_connection_pool)
        if not conn_users:
            await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        try:
            async with conn_users.cursor() as db_cursor:
                await db_cursor.execute("DELETE FROM users")
                await conn_users.commit()

            pending_reset.remove(msg.from_user.id)
            await msg.reply("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –∏–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
        except Exception as e:
            await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        finally:
            await release_connection(conn_users, users_connection_pool)
    elif msg.text.lower() == "–Ω–µ—Ç":
        pending_reset.remove(msg.from_user.id)
        await msg.reply("–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω.")

@dp.message(Command("top"))
async def top_command(msg: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    conn_users = await get_connection(users_connection_pool)  # <-- –¥–æ–±–∞–≤–∏–ª–∏ pool
    if not conn_users:
        await msg.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    async with conn_users.cursor() as db_cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É
        await db_cursor.execute("SELECT user_id, username, authority FROM users ORDER BY authority DESC")
        users = await db_cursor.fetchall()

        if not users:
            await msg.reply("–í –∏–≥—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.", reply_to_message_id=msg.message_id)
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
            top_list = []
            for user_id, username, authority in users:
                status = (
                    "–°–º–æ—Ç—Ä—è—â–∏–π" if authority >= 130 else
                    "–ë–∞—Ä–æ–Ω" if authority >= 90 else
                    "–ë–ª–∞—Ç–Ω–æ–π" if authority >= 75 else
                    "–ü–∞—Ü–∞–Ω" if authority >= 60 else
                    "–ú—É–∂–∏–∫" if authority >= 50 else
                    "–•—Ä–æ–º–æ–π" if authority >= 40 else
                    "–®–µ—Å—Ç—ë—Ä–∫–∞" if authority >= 30 else
                    "–ì–∞–∑–æ–Ω—é—Ö" if authority >= 20 else
                    "–í–æ–¥–æ–ª–∞–∑" if authority >= 10 else
                    "–ü–µ—Ç—É—Ö"
                )
                top_list.append(f"{username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority} - –°—Ç–∞—Ç—É—Å: {status}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-—Å–ø–∏—Å–æ–∫
            await msg.reply(f"–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É:\n" + "\n".join(top_list), reply_to_message_id=msg.message_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
    await release_connection(conn_users, users_connection_pool)  # <-- –ø–µ—Ä–µ–¥–∞–µ–º pool

# –ö–æ–º–∞–Ω–¥–∞ /bugreport
@dp.message(Command("bugreport"))
async def bugreport_command(msg: Message, state: FSMContext):
    global bugreport_counter
    
    bugreport_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç–æ–≤
    await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–µ—Ä–µ–¥–∞—Ç—å –±–∞–≥—Ä–µ–ø–æ—Ä—Ç.")
    await state.set_state(BugReportState.waiting_for_description)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è

# –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@dp.message(BugReportState.waiting_for_description)
async def process_bugreport_description(msg: Message, state: FSMContext):
    user_id = msg.from_user.id
    description = msg.text  # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = msg.from_user.username or msg.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_messages = list(user_messages.get(user_id, []))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"Bugreport #{bugreport_counter}\n"
    report += f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {username} (@{username})\n"
    report += f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - {description}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–æ–º–µ—Ç–∫–æ–π, –∫—Ç–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª
    for i, message in enumerate(recent_messages, start=1):
        if i % 2 == 1:  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            report += f"{i} –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}\n"
        else:  # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
            # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç–µ–∫—Å—Ç
            if message.startswith("Sticker:"):  # –≠—Ç–æ —Å—Ç–∏–∫–µ—Ä
                report += f"{i} –û—Ç–≤–µ—Ç –±–æ—Ç–∞: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä.\n"
            else:
                report += f"{i} –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {message}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–≥—Ä–µ–ø–æ—Ä—Ç –≤ –ª–∏—á–∫—É
    await bot.send_message(MY_TELEGRAM_ID, report)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç–∞
    await msg.reply("–í–∞—à –±–∞–≥—Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_user_commands(msg: Message):
    user_id = msg.from_user.id
    command = msg.text.lower()

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await log_user_message(user_id, command)

    response = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é response

    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if command in actions:
        action = actions[command]
        response = action['comment']
        await msg.reply(response)

    elif command in responses:
        response, sticker = responses[command]
        if response:
            await msg.reply(response)
        if sticker:
            await msg.reply_sticker(sticker)
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–∞
            await log_user_message(user_id, "Sticker:")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    if response is None:
        response = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."  # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–∑ `actions` –∏–ª–∏ `responses`

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–≤–µ—Ç
    await log_user_message(user_id, response)

# Handling "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π"
@dp.message()
async def get_text_messages(msg: Message):
    if not msg.text or msg.text.startswith("/"):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        return

    text_lower = msg.text.lower().strip()

    # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—É "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π"
    if text_lower == "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π":
        conn_users = await get_connection(users_connection_pool)
        try:
            async with conn_users.cursor() as db_cursor:
                await db_cursor.execute("SELECT username, authority FROM users")
                users = await db_cursor.fetchall()

                under_skonka = [user for user in users if user[1] < 50]

                if not under_skonka:
                    await msg.reply("–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø—É—â–µ–Ω, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å –º–∞—Å—Ç—å—é!", reply_to_message_id=msg.message_id)
                else:
                    min_authority = min(user[1] for user in under_skonka)
                    lowest_users = [user[0] for user in under_skonka if user[1] == min_authority]

                    if len(lowest_users) == 1:
                        await msg.reply(f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: {lowest_users[0]}", reply_to_message_id=msg.message_id)
                    else:
                        await msg.reply(f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å —Å–∏–¥—è—Ç: {', '.join(lowest_users)}", reply_to_message_id=msg.message_id)
        except Exception as e:
            await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await release_connection(conn_users, users_connection_pool)
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    for keyword, responses_list in random_responses.items():
        if keyword in text_lower:
            random_reply = choice(responses_list)
            await msg.reply(random_reply, reply_to_message_id=msg.message_id)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (responses)
    for keyword, (response, sticker_id) in responses.items():
        if keyword in text_lower:
            if response:
                await msg.reply(response, reply_to_message_id=msg.message_id)
            if sticker_id:
                await msg.reply_sticker(sticker_id, reply_to_message_id=msg.message_id)
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # 4Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É)
    await bot.send_message(
        MY_TELEGRAM_ID,
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.full_name} ({msg.from_user.id}) –≤ —á–∞—Ç–µ {msg.chat.id}: {msg.text}"
    )

    # 5Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "—à–æ"
    if text_lower == "—à–æ":
        reply_text = "–∫–∞–ø—à–æ"
        if msg.chat.type == "private":
            await msg.answer(reply_text)
        else:
            await msg.reply(reply_text, reply_to_message_id=msg.message_id)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
