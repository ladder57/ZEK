from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import asyncio, sqlite3, os
from random import choice
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from dotenv import load_dotenv
from bot.config import responses, random_responses, negative_actions, positive_actions

env_path = os.path.join(os.getcwd(), "api_token.env")
load_dotenv(dotenv_path=env_path)

API_TOKEN = os.getenv("API_TOKEN")
MY_TELEGRAM_ID = os.getenv("MY_TELEGRAM_ID")

# Database setup
db_conn = sqlite3.connect("users.db")
db_cursor = db_conn.cursor()

db_cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    authority INTEGER,
    crime TEXT
)
""")
db_conn.commit()

# Create bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

class StopGameStates(StatesGroup):
    awaiting_confirmation = State()

# Command: /start
@dp.message(Command("start"))
async def send_welcome(msg: Message):
    if msg.chat.type == "private":
        await msg.answer("–í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É! –°–º–µ—Ä—Ç–∏ –º—É—Å–æ—Ä—Å–∫–æ–º—É, —Ö–æ–¥—É –≤–æ—Ä–æ–≤—Å–∫–æ–º—É, –ê–£–ï! –ü–æ –ø–æ–Ω—è—Ç–∏—è–º —Ä–∞—Å–∫–∏–¥–∞—é –∑–¥–µ—Å—å /help")
    elif msg.chat.type in {"group", "supergroup"}:
        await msg.reply(
            "–í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É! –°–º–µ—Ä—Ç–∏ –º—É—Å–æ—Ä—Å–∫–æ–º—É, —Ö–æ–¥—É –≤–æ—Ä–æ–≤—Å–∫–æ–º—É, –ê–£–ï! –ü–æ—è—Å–Ω—é –∑–∞ –ø–æ–Ω—è—Ç–∏—è –∑–¥–µ—Å—å /help",
            reply_to_message_id=msg.message_id
        )

# Command: /help
@dp.message(Command("help"))
async def help_command(msg: Message):
    await msg.reply(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/about - –∫—Ç–æ —è\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/ktolox - –∑–∞–≥–ª—è–Ω—É—Ç—å –ø–æ–¥ —à–∫–æ–Ω–∫—É\n"
        "/newgame - –∑–∞–≥—Ä–µ–º–µ—Ç—å –≤ —Ç—é—Ä—è–≥—É\n"
        "/top - —Ç–æ–ø –ø–æ –º–∞—Å—Ç–∏\n"
        "/stopgame - –¥–∞—Ç—å –∑–∞–¥–Ω—é—é\n"
        "/action - —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n",
        reply_to_message_id=msg.message_id
    )

# Command: /newgame
@dp.message(Command("newgame"))
async def new_game(msg: Message):
    db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
    user = db_cursor.fetchone()
    if user:
        await msg.reply("–¢—ã —É–∂–µ –≤ —Ç—é—Ä—è–≥–µ, –ª—É—à–ø–∞–π–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π /action —à–æ–± –º—É—Ç–∏—Ç—å –¥–≤–∏–∂\n"
                        "–ò–ª–∏ /stopgame —à–æ–± –¥–∞—Ç—å –∑–∞–¥–Ω—é—é, –æ—á–∫–æ—à–Ω–∏–∫"
                        )
    else:
        crime = choice(["–°–¥–µ–ª–∞–ª –¥—ã—Ä–∫–∏ –≤ —Å—ã—Ä–µ", "–î–æ–º–æ–≥–∞–ª—Å—è –¥–æ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∏", "–°–æ–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö", "–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ –∂–µ–Ω—â–∏–Ω", "–ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞"])
        db_cursor.execute("INSERT INTO users (user_id, username, authority, crime) VALUES (?, ?, 50, ?)", (msg.from_user.id, msg.from_user.username, crime))
        db_conn.commit()
        await msg.reply(f"–û–ø–∞–ø–∞, —Ö–∞—Ç–∞! –£ –Ω–∞—Å –ø–µ—Ä–≤–æ—Ö–æ–¥ –≤ —Ö–∞—Ç–µ! {msg.from_user.full_name}! –û—Å—É–∂–¥–µ–Ω –∑–∞ {crime}.")

# –ö–æ–º–∞–Ω–¥–∞: /action
@dp.message(Command("action"))
async def action_command(msg: Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
    user = db_cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if not user:
        await msg.reply("–¢—ã –µ—â–µ –Ω–∞ —Å–≤–æ–±–æ–¥–µ, —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—å—é - /newgame.")
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
        if choice([True, False]):
            action_description = choice(positive_actions)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            authority_change = choice([5, 10, 15])  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç
        else:
            action_description = choice(negative_actions)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            authority_change = choice([-5, -10, -15])  # –£–º–µ–Ω—å—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç
        new_authority = user[2] + authority_change
        if new_authority < 0:
            new_authority = 0  # –ù–µ –¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—å –º–µ–Ω—å—à–µ 0
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_cursor.execute("UPDATE users SET authority = ? WHERE user_id = ?", (new_authority, msg.from_user.id))
        db_conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        change_symbol = "+" if authority_change > 0 else "-"
        await msg.reply(
            f"–¢–≤–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç {change_symbol}{abs(authority_change)} ({action_description}) –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_authority}."
        )

@dp.message(Command("ktolox"))
async def kto_lox_command(msg: Message):
    db_cursor.execute("SELECT username, authority FROM users")
    users = db_cursor.fetchall()
    under_skonka = [user for user in users if user[1] < 50]

    if not under_skonka:
        await msg.reply("–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø—É—â–µ–Ω, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å –º–∞—Å—Ç—å—é!", reply_to_message_id=msg.message_id)
        return

    min_authority = min(user[1] for user in under_skonka)
    lowest_users = [user[0] for user in under_skonka if user[1] == min_authority]

    if len(lowest_users) == 1:
        await msg.reply(
            f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: {lowest_users[0]}",
            reply_to_message_id=msg.message_id
        )
    else:
        await msg.reply(
            f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å —Å–∏–¥—è—Ç: {', '.join(lowest_users)}",
            reply_to_message_id=msg.message_id
        )

# Command: /about
@dp.message(Command("about"))
async def about_command(msg: Message):
    about_text = (
        "üëã –°–∞–ª–∞–º–∞–ª–µ–∫—Å—É—Å! –Ø —Å–º–æ—Ç—Ä—è—â–∏–π –∑–∞ —Ö–∞—Ç–æ–π –∑–¥–µ—Å—å, —â–µ–Ω–∫–∏! –°–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø–æ–ø—É—Å–∫–∞—Ç—å –≤–∞—Å.\n\n"
        "‚öôÔ∏è –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –û—Ç–≤–µ—á–∞—Ç—å –∑–∞ –±–∞–∑–∞—Ä.\n"
        "- –•—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞—á–∞–≤—à–∏—Ö –∏–≥—Ä—É.\n"
        "- –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π \"–∏–≥—Ä–æ–≤–æ–π –∂–∏–∑–Ω—å—é\" —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ /newgame, /action –∏ /status.\n\n"
        "üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/newgame - –¢–µ—Å—Ç –Ω–∞ —Ç—å–æ—Ç—é —à–ª—é—Ö—É\n"
        "/action - –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/status - –£–∑–Ω–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n\n"
        "üéØ –ü–æ —Ç—É–∑–∏–∫—É –Ω–µ –≥–∞—Ç–∏–º—Å—è –Ω–æ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–∞–≤–∏–ª –Ω–µ—Ç. \n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –¢–ï–†–Ø–ô–°–Ø –í–ê–°–¨ üòâ"
    )

    if msg.chat.type == "private":
        await msg.answer(about_text)
    else:
        await msg.reply(about_text, reply_to_message_id=msg.message_id)

# –ö–æ–º–∞–Ω–¥–∞: /stopgame
@dp.message(Command("stopgame"))
async def stop_game_command(msg: Message, state: FSMContext):
    db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
    user = db_cursor.fetchone()

    if not user:
        await msg.reply("–¢—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Ä–æ–∫, –º–æ–ª–æ–∫–æ—Å–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π /newgame –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.")
    else:
        await state.set_state(StopGameStates.awaiting_confirmation)
        await msg.reply("–¢—ã —É–µ—Ä–µ–Ω, –í–∞—Å—å? –î–æ–∂–¥–µ—à—å—Å—è –æ—Ç—Å–∏–¥–∫–∏ –≤ —Ç–∏—à–∏–Ω–µ? –ù–∞–ø–∏—à–∏ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@dp.message(StateFilter(StopGameStates.awaiting_confirmation))
async def stop_game_confirmation(msg: Message, state: FSMContext):
    if msg.text.lower() == "–¥–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã
        db_cursor.execute("SELECT authority, username FROM users WHERE user_id = ?", (msg.from_user.id,))
        user = db_cursor.fetchone()
        if not user:
            await msg.reply("–û—à–∏–±–∫–∞: –µ–±–ª–∞–Ω —Ç—ã —É–∂–µ –Ω–∞ —Å–≤–æ–±–æ–¥–µ.")
            await state.clear()
            return

        username = user[1] if user[1] else "–ò–≥—Ä–æ–∫ –±–µ–∑ –∏–º–µ–Ω–∏"
        authority = user[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Ç—å
        status = (
            "–°–º–æ—Ç—Ä—è—â–∏–π" if authority >= 130 else
            "–ë–∞—Ä–æ–Ω" if authority >= 90 else
            "–ë–ª–∞—Ç–Ω–æ–π" if authority >= 75 else
            "–ü–∞—Ü–∞–Ω" if authority >= 60 else
            "–ú—É–∂–∏–∫" if authority >= 50 else
            "–•—Ä–æ–º–æ–π" if authority >= 40 else
            "–®–µ—Å—Ç—ë—Ä–∫–∞" if authority >= 30 else
            "–ì–∞–∑–æ–Ω—é—Ö" if authority >= 20 else
            "–í–æ–¥–æ–ª–∞–∑" if authority >= 10 else
            "–ü–µ—Ç—É—Ö"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        gatilsya_times = choice(range(1, 101))
        ending_reason = choice(["—É–º–µ—Ä", "–≤—ã—à–µ–ª –Ω–∞ —Å–≤–æ–±–æ–¥—É"])
        death_reasons = [
            "—É—Ç–æ–Ω—É–ª –≤ –ø–∞—Ä–∞—à–µ",
            "–ø–æ–≤–µ—Å–∏–ª—Å—è –≤ –∫–∞–º–µ—Ä–µ",
            "–≤—Å–∫—Ä—ã–ª—Å—è –ø–æ–¥ —à–∫–æ–Ω–∫–æ–π",
            "–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –Ω–∞ –ø—Ä–æ–º–∑–æ–Ω–µ",
            "–∑–∞—Å—Ç—Ä–µ–ª–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–±–µ–≥–∞",
            "–æ–∫–æ—á—É—Ä–∏–ª—Å—è –∂–º—É—Ä, –∑–∞–±–∏—Ç –≤ –¥—Ä–∞–∫–µ"
        ]
        death_cause = choice(death_reasons) if ending_reason == "—É–º–µ—Ä" else None

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã
        db_cursor.execute("DELETE FROM users WHERE user_id = ?", (msg.from_user.id,))
        db_conn.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = (
            f"–ò–≥—Ä–æ–∫ {username} –∑–∞–∫–æ–Ω—á–∏–ª —Å–≤–æ–π —Ç—é—Ä–µ–º–Ω—ã–π –ø—É—Ç—å.\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority}\n"
            f"–ú–∞—Å—Ç—å: {status}\n"
            f"–ì–∞—Ç–∏–ª—Å—è –ø–æ —Ç—É–∑–∏–∫—É: {gatilsya_times} —Ä–∞–∑.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {ending_reason}"
        )
        if death_cause:
            result_message += f" ({death_cause})"

        await msg.reply(result_message)
        await state.clear()
    elif msg.text.lower() == "–Ω–µ—Ç":
        await msg.reply("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, —â–∏–Ω–∞–∫! –ë–µ–≥–æ–º –ø–∞—Ä–∞—à—É –¥—Ä–∞–∏—Ç—å!")
        await state.clear()
    else:
        await msg.reply("–£–≤–µ—Ä–µ–Ω? –ß–µ—Ä–∫–∞—à, –Ω–∞–ø–∏—à–∏ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞: /top
@dp.message(Command("top"))
async def top_command(msg: Message):
    db_cursor.execute("SELECT user_id, username, authority FROM users ORDER BY authority DESC")
    users = db_cursor.fetchall()

    if not users:
        await msg.reply("–í –∏–≥—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.", reply_to_message_id=msg.message_id)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
    top_list = []
    for user in users:
        user_id, username, authority = user
        status = (
            "–°–º–æ—Ç—Ä—è—â–∏–π" if authority >= 130 else
            "–ë–∞—Ä–æ–Ω" if authority >= 90 else
            "–ë–ª–∞—Ç–Ω–æ–π" if authority >= 75 else
            "–ü–∞—Ü–∞–Ω" if authority >= 60 else
            "–ú—É–∂–∏–∫" if authority >= 50 else
            "–•—Ä–æ–º–æ–π" if authority >= 40 else
            "–®–µ—Å—Ç—ë—Ä–∫–∞" if authority >= 30 else
            "–ì–∞–∑–æ–Ω—é—Ö" if authority >= 20 else
            "–í–æ–¥–æ–ª–∞–∑" if authority >= 10 else
            "–ü–µ—Ç—É—Ö"
        )
        top_list.append(f"{username} - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority} - –°—Ç–∞—Ç—É—Å: {status}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-—Å–ø–∏—Å–æ–∫
    top_message = "\n".join(top_list)
    await msg.reply(f"–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É:\n{top_message}", reply_to_message_id=msg.message_id)  

# –ö–æ–º–∞–Ω–¥–∞: /status
@dp.message(Command("status"))
async def status_command(msg: Message):
    db_cursor.execute("SELECT * FROM users WHERE user_id = ?", (msg.from_user.id,))
    user = db_cursor.fetchone()
    if not user:
        await msg.reply("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame.")
    else:
        authority = user[2]
        status = (
            "–°–º–æ—Ç—Ä—è—â–∏–π" if authority >= 130 else
            "–ë–∞—Ä–æ–Ω" if authority >= 90 else
            "–ë–ª–∞—Ç–Ω–æ–π" if authority >= 75 else
            "–ü–∞—Ü–∞–Ω" if authority >= 60 else
            "–ú—É–∂–∏–∫" if authority >= 50 else
            "–•—Ä–æ–º–æ–π" if authority >= 40 else
            "–®–µ—Å—Ç—ë—Ä–∫–∞" if authority >= 30 else
            "–ì–∞–∑–æ–Ω—é—Ö" if authority >= 20 else
            "–í–æ–¥–æ–ª–∞–∑" if authority >= 10 else
            "–ü–µ—Ç—É—Ö"
        )
        await msg.reply(f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç: {authority}\n–°—Ç–∞—Ç—É—Å: {status}")

# Handling "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π"
@dp.message()
async def get_text_messages(msg: Message):
    if msg.text:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑—ã "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π"
        if msg.text.lower().strip() == "–∫—Ç–æ –ø–æ–ø—É—â–µ–Ω–Ω—ã–π":
            db_cursor.execute("SELECT username, authority FROM users")
            users = db_cursor.fetchall()
            under_skonka = [user for user in users if user[1] < 50]

            if not under_skonka:
                await msg.reply("–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ø—É—â–µ–Ω, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å –º–∞—Å—Ç—å—é!", reply_to_message_id=msg.message_id)
                return

            min_authority = min(user[1] for user in under_skonka)
            lowest_users = [user[0] for user in under_skonka if user[1] == min_authority]

            if len(lowest_users) == 1:
                await msg.reply(
                    f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è: {lowest_users[0]}",
                    reply_to_message_id=msg.message_id
                )
            else:
                await msg.reply(
                    f"–ü–æ–¥ —à–∫–æ–Ω–∫–æ–π —Å–µ–π—á–∞—Å —Å–∏–¥—è—Ç: {', '.join(lowest_users)}",
                    reply_to_message_id=msg.message_id
                )
            return

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–∞–∫ –±—ã—Ç—å?"
        for keyword, responses_list in random_responses.items():
            if keyword in msg.text.lower():
                random_reply = choice(responses_list)
                await msg.reply(random_reply, reply_to_message_id=msg.message_id)
                return

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã)
        for keyword, (response, sticker_id) in responses.items():
            if keyword in msg.text.lower():
                if response:
                    await msg.reply(response, reply_to_message_id=msg.message_id)
                if sticker_id:
                    await msg.reply_sticker(sticker_id, reply_to_message_id=msg.message_id)
                return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if msg.text:
        await bot.send_message(
            MY_TELEGRAM_ID,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.full_name} ({msg.from_user.id}) –≤ —á–∞—Ç–µ {msg.chat.id}: {msg.text}"
        )

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "—à–æ"
    if msg.text.lower().strip() == "—à–æ":
        if msg.chat.type == "private":
            await msg.answer("–∫–∞–ø—à–æ")
        elif msg.chat.type in {"group", "supergroup"}:
            await msg.reply("–∫–∞–ø—à–æ", reply_to_message_id=msg.message_id)
        return

# Main function
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
